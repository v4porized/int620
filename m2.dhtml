#!/usr/local/bin/perl  
#!/usr/bin/perl
###############################################
# first example using templating, xhtml and css
# Â© ckaduri, 2002-2016
# version 0.9g
#
##############################################
use strict;
use Template;   #step 1
use DBI;
use CGI;
use POSIX;
use Apache::Session::MySQL;
our $templateLib;

# precompile inspection
	  $templateLib='/export/srv/www/main/tt2';

###############################################
# setup constants

################################ 
## Declaration of Variables   ##
################################
my(
    $template,
    $ttObject,
    $cgiObject,
    $sample,
    $vars,
    $title,
    $dbObject,
    $mobile,
	$session,
	$sid,
	$count,
	$page,
	$totalPages,
	%session,
	@collection,
	@validBook,
	@results,
	@uris,
	%validSection,
	%userInput,
    );


my($debug)=0;
$mobile=0;

    
#########################
# Generate Magic Header #
#########################
$cgiObject=CGI->new();

print STDOUT $cgiObject->header(-type=>"text/html", -charset=>'utf8');

################################ 
## New Template Object(step 2)##
################################
my %config=(
	INCLUDE_PATH => [ $templateLib ],
    RELATIVE => 0
    );
    
$ttObject = Template->new( \%config );

    if ($mobile) {
        $template = 'm1-mobile.tt2';
    }   
    else {
        $template = 'm2-desktop.tt2';
    }

#########
# debug #
#########

if($debug){

}
else {	
# Get User Input
%userInput = $cgiObject->Vars();
}

#########################
## Database Connection ##
#########################		

# Create dbObject
$dbObject = DBI->connect("dbi:mysql:bible:localhost","web","nouser")
	or die "Can't connect to database: $DBI::errstr\n";

########################
## Session Management ##
########################

#recover session/sanity check session
$sid=$userInput{sid};

eval {

	tie %session, "Apache::Session::MySQL", $sid, { 
		Handle=>$dbObject,
		LockHandle=>$dbObject,
		TableName=> 'sessions',
	};

};

if ($@) { #If eval failed create new session

	undef $sid;
	
	tie %session, "Apache::Session::MySQL", $sid,{ #Creates new session
    Handle => $dbObject,
    LockHandle => $dbObject,
    TableName  => 'sessions',
    };

}

# Get the session ID
$sid = $session{_session_id};

#Recover semaphores if session exists
if ( $session{validBook} && $session{validSection} && $session{collection} ) {
	@validBook=@{ $session{validBook} };
	%validSection=%{ $session{validSection} };
	@collection=@{ $session{collection} };
}
else {
# If no session, get collection
	my ($refValidBook,$refValidSection,$refCollection)=getCollection($dbObject);
	
	#Save semaphores
	$session{validBook}=$refValidBook;
	$session{validSection}=$refValidSection;
	$session{collection}=$refCollection;
	
	#Get semaphores
	@validBook=@{ $refValidBook };
	%validSection=%{ $refValidSection };
	@collection=@{ $refCollection };
	
}

	
###################################### 
## Pretend do some work (step 3)	##
######################################

$title=("m2 INT620");
my $sqlSearchStatement;

if ($userInput{searchQuery}) {

	my (
		$fields,
		$table,
		$match,
		$order,
		$limit,
		$wherebook,
		$booleanMode,
		$count,
		$sqlRecordCount,
		$sqlSearchObject,
#		$sqlSearchStatement,
		$page,
		$totalPages,
		$recordsPerPage,
		$offset,
		$uri,
		$searchBookName,
	);


### Prepare SQL Statement Variables

	$fields = "bsect, bname, bnum, cnum, vnum, vtext";
	$table= "kjv";
	$order= "ORDER BY relevance DESC, bnum ASC, cnum ASC, vnum ASC";
	$recordsPerPage=10;
	
	# If advSearch checked use BOOLEAN MODE
	if ($userInput{'advSearch'}) {
		$booleanMode = ("IN BOOLEAN MODE");
	}
	else { # Ensure clear if not selected
		$booleanMode = ('');
	}
	
	# Use $booleanMode to create $match part of sql statement
	$match= "MATCH(vtext) AGAINST (? $booleanMode)";

    # Im lazy this was easier
    my $book = $userInput{book};
    
    # Prepare wherebook
    	if ($validSection{$book} eq 1) {
        	$wherebook = qq{ AND bsect = "$book" };
        }
    	elsif ($validBook[$book]) {
    		$wherebook = qq{ AND bnum = "$book" };
    	}
        else {
            $wherebook = "";
        }

### Get count of recordsds and Determine pages required

	$sqlRecordCount = qq { 
		SELECT COUNT(*) 
		FROM $table 
		WHERE $match 
		$wherebook 
		};
	
	# Pretty sure he said sql does the sanatize of this
	$count = $dbObject->selectrow_array($sqlRecordCount,undef,$userInput{searchQuery});
    	
	# count wont pass to template nicely, using $userInput hash to pass works
    $userInput{count}=$count;
	
	unless( $userInput{countOnly} ) {

		# calc total pages
		$totalPages=ceil($count/$recordsPerPage);

		# get current page from user and sanity check
		# greater than 0 less than or equal to totalPages
		$page = ($userInput{page} > 0 && $userInput{page} <= $totalPages) ? $userInput{page} : 1;
		
        # pass back page to template to prevent page 1 link on search
		$userInput{page} = $page;

		# calc db offset and set limit part of sql statement
		$offset=(($page-1) * $recordsPerPage);
		$limit = ("LIMIT $offset, $recordsPerPage");	

	### Create Search sql statement and prepare to execute search
		
		# sql search statement	
		$sqlSearchStatement = qq {
			  SELECT $fields, $match AS relevance
			  FROM $table
			  WHERE $match
			  $wherebook
			  $order
			  $limit;
			  };	  

		# Prepare Search Object
		my $sqlSearchObject = $dbObject->prepare($sqlSearchStatement)
			or die "Error preparing: $DBI::errstr\n";

		# Execute Section Object
		$sqlSearchObject->execute($userInput{searchQuery},$userInput{searchQuery})
			or die "Couldn't execute query '$sqlSearchStatement' --- '$sqlSearchObject':$DBI::errstr\n";
		
		while (my $ref=$sqlSearchObject->fetchrow_hashref()) {
			push (@results, $ref);
		}
		
	### Generate URLs for pages

		#get current url to modify
		$uri=$cgiObject->self_url();

		#strip page if there is one
		$uri=~s/;page=(\d*)//o;

		foreach my $i (1..$totalPages) {
			push(@uris,{
				page=>$i,
				uri=>"$uri&page=$i",
				#uri=>"$uri?searchQuery=$userInput{searchQuery}&book=$userInput{book}&page=$i",            
			});
		}
		
	} # end unless userinput search query
}

###################################### 
## Prep vars for template (step 4a) ##
######################################

if ( @results || $count || $userInput{searchQuery}) {

$vars = {
		count => $count,
		sid => $sid,
		totalPages => $totalPages,
		results => \@results,
		uris => \@uris,
		userInput=> \%userInput,
        collection => \@collection,
        sqlselect => $sqlSearchStatement,
    };
}
else {
	$vars = {
		title => $title,
		collection => \@collection,
		sid => $sid
	}
}

###################
## Close Session ##
###################

untie(%session);
$dbObject->disconnect;

###################################### 
## Bind and pass flow (step 4b + 5) ##
######################################

$ttObject->process ( $template, $vars ) 
	or die( $ttObject->error() );
#die in development, production "or send to some error page"
   
######################################

######################################
## Populate collection /w optgroups ##
######################################

sub getCollection {

	#Get passed variables
	my $dbObject = $_[0];
	
	#Declare requires variables
	
	my (
		$sqlBookObject,
		$sqlBookSelect,
		$sqlSectionObject,
		$sqlSectionSelect,
		@validBook,
		@collection,
		%validSection,
	);
	
	# Select Statement for Sections
	$sqlSectionSelect=qq~ SELECT bsect as section, sectname as name FROM section ORDER by sectorder; ~;

	# Prepare Section Object
	$sqlSectionObject = $dbObject->prepare($sqlSectionSelect)
		or die "Error preparing: $DBI::errstr\n";

	# Execute Section Object
	$sqlSectionObject->execute()
		or die "Couldn't execute query '$sqlSectionObject':$DBI::errstr\n";

	# Hard Code All
	$collection[0]={section=>'All',name=>'Entire Bible'};

	# Fetch and push on @collection
	SECTION:    while (my $ref=$sqlSectionObject->fetchrow_hashref()){
		            push (@collection,$ref);
            		# Populate hash validSection with sections from database
            		# for untainting of user input
            		$validSection{ $ref->{'section'} }=1;
        		}
	$sqlSectionObject->finish;
	
	# Select Statement for Books
	$sqlBookSelect= qq~ SELECT bnum,bname FROM books where bsect = ? ORDER by bnum; ~;

	# Prepare Section Object
	$sqlBookObject = $dbObject->prepare($sqlBookSelect);

	# Loop through $sectionRef
	BOOKS: foreach my $sectionRef (@collection) { 
				my $bsect = $sectionRef->{section}; # Simplifier can use $bsect
				next BOOKS if ($bsect eq 'All');
				#Execute Select binding $bsect
				$sqlBookObject->execute($bsect)
					or die "Couldn't execute query '$sqlBookObject':$DBI::errstr\n";
				while (my $ref=$sqlBookObject->fetchrow_hashref()) {
					push (@{ $sectionRef->{books} }, $ref);
					# populate array validBook with books in database
					# for untainting of user input
					$validBook[ $ref->{'bnum'} ] = 1;
				}
			}
	
	$sqlBookObject->finish;
	
	# return semaphore references
	return (\@validBook,\%validSection,\@collection);
			
} # end of getCollection function

__END__




	  
	  
	  
# = css id
quotes = html id
no quotes = jquery object
	  
<script>
//wait until the "Document Object" is ready
$(document).ready(function() {
//get a reference to the result div (where we will load the results)
	var resultObject = $( "#result");

	$( "a" ).click(function( e ) {
		e.preventDefault();
		var linkObject = $( this );
		$( "#searchForm" ).empty(); // Clear the html id "#searchForm"
		$.ajax({
			url: linkObject.attr( "href" ), // The linkObject we are accessing
			type: "get", // The type of request
			dataType: "html", // The type of data that is getting returned
			error: function() {
			resultObject.html( " <p>Page Not Found!!</p>" ); // Load results into the page
			}
			success: function( newData ) {
			resultObject.html( newData );
			}
		});
		
	});
});
</script>


<script>
$(document).ready(function () {
	
	$("#theform").submit(function(event) {
	
		// Prevent Default submit behavior
		event.preventDefault();
	
		$("#results").empty(); // Clear the css id #results
		
		// Get some values from elements on the page:
		var values = $(this).serialize();
		
		// Send data usin post and put the results in the div
	}


}


- Call the Library

- Use Document Ready to load the handlers (overload functions)

- Get the event from the document and make that event not do defaults

- attach a new ajax handler






- Control State of the aplication
	am i getting data?
		no - send form
		yes - do a search
		
if ($input{searchQuery}) {
do a search
}
else
{
send form
}


<!-- TT2 m2 Sudo Code

$userInput=$cgiOBject (method arrow)  Vars();

$vars = (
    uris=\@uris,
    userInput=\%userInput,
    };

[% tt2 %]

[% FOREACH ref IN uris -%]
    [% IF ref.page == userInput.page %]
        [% ref.page %]
    [% ELSE %]
        <a href="[% ref.uri %]">[% ref.page %]</a>
    [% END %]


tt2 Sudo Code -->
